@page "/wasm/servers"
@using WebAssemblyDemo.Client.Models

@implements IDisposable

@rendermode InteractiveWebAssembly

@inject NavigationManager NavigationManager
@inject IServersRepository ServersApiRepository
@inject PersistentComponentState ApplicationState

<h3>Servers</h3>
<br />
<br />

<table class="table">
    <thead>
        <tr>
            <th>
                Name
            </th>
            <th>
                City
            </th>
            <th>
                Status
            </th>            
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (listServers.Any())
        {
            foreach(var server in listServers)
            {
                @if (server is not null)
                {
                    <tr>
                        <td>@server.Name</td>
                        <td>@server.City</td>
                        <td>@(server.IsOnline ? "Online" : "Offline")</td>
                        <td><a class="btn btn-link" href="/wasm/servers/@server.ServerId">Edit</a></td>
                        <td><button class="btn btn-link" @onclick="@( async ()=> { await Delete(server.ServerId); })">Delete</button></td>
                    </tr>
                }
            }
        }
        else
        {
            <p><em>Loading...</em></p>
        }
    </tbody>
</table>
<br/>
<a class="btn btn-primary" href="/wasm/servers/add">Add Server</a>

@code {
    public List<Server> listServers { get; set; } = new List<Server>();
    private PersistingComponentStateSubscription persistingSubscription;    

    private async Task Delete(int serverId)
    {
        await ServersApiRepository.DeleteServerAsync(serverId);
        listServers = await ServersApiRepository.GetServersAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var guid = Guid.NewGuid();
        Console.WriteLine($"{this.GetType().Name}: {nameof(OnInitialized)} : {guid}");

        persistingSubscription =
            ApplicationState.RegisterOnPersisting(PersistData);

        if (!ApplicationState.TryTakeFromJson<List<Server>?>(
            "Servers", out var restored))
        {
            listServers = await ServersApiRepository.GetServersAsync();
        }
        else
        {
            listServers = restored!;
        }
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson("Servers", listServers);

        return Task.CompletedTask;
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        var guid = Guid.NewGuid();
        Console.WriteLine($"{this.GetType().Name}: {nameof(SetParametersAsync)} : {guid}");

        return base.SetParametersAsync(parameters);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        var guid = Guid.NewGuid();
        Console.WriteLine($"{this.GetType().Name}: {nameof(OnParametersSet)} : {guid}");
    }

    protected override bool ShouldRender()
    {
        var guid = Guid.NewGuid();
        Console.WriteLine($"{this.GetType().Name}: {nameof(ShouldRender)} : {guid}");

        return base.ShouldRender();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        var guid = Guid.NewGuid();
        Console.WriteLine($"{this.GetType().Name}: {nameof(OnAfterRender)} : {guid}");
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }
}         
