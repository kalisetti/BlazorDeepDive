@page "/serverstatus"
@using Microsoft.AspNetCore.Authorization
@using ServerManagement.StateStore

@rendermode InteractiveServer

@attribute [Authorize]

@inherits ComponentBase

@inject NavigationManager NavigationManager
@inject ContainerStorage containerStorage
@inject IServersEFCoreRepository ServersEFCoreRepository

<h3>Server Status</h3>
<br />
@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

@if (server is not null)
{
    <FieldComponent Label="Server Status">
        <Control>
            @if (server.IsOnline)
            {
                <input type="checkbox"
                       @bind-value="server.IsOnline"
                        checked class="form-check-input"></input>
            }
            else
            {
                <input type="checkbox"
                       @bind-value="server.IsOnline"
                       class="form-check-input"></input>
            }

        </Control>
    </FieldComponent>
    <br />
    <button type="button" class="btn btn-primary" @onclick="Save">Save</button>
}

@code {
    private Server? server;

    private string? errorMessage;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            this.server = this.containerStorage.GetServer();
            StateHasChanged();
        }
    }

    private void Save()
    {
        if (server is not null)
        {   
            containerStorage.SetServer(null);
            ServersEFCoreRepository.AddServer(server);
            NavigationManager.NavigateTo($"/servers/back_from/{this.server?.City}");
        }
    }
}
