@page "/server/{id:int?}"
@using Microsoft.AspNetCore.Authorization

@inject NavigationManager NavigationManager
@inject IServersEFCoreRepository ServersEFCoreRepository

@attribute [Authorize(Policy = "Manager")]

@if (Id.HasValue)
{
    <h3>Edit Server</h3>
}
else
{
    <h3>Add Server</h3>
}

@if (server != null)
{
    <EditForm Model="server" FormName="formServer" OnValidSubmit="Submit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        @if (server.ServerId > 0)
        {
            <InputNumber @bind-Value="server.ServerId" hidden></InputNumber>
        }        

        <FieldComponent Label="Name">
            <Control>
                <InputText @bind-Value="server.Name" class="form-control"></InputText>
            </Control>
            <ValidationControl>
                <ValidationMessage For="() => server.Name"></ValidationMessage>
            </ValidationControl>
        </FieldComponent>

        <FieldComponent Label="City">
            <Control>
                <InputText @bind-Value="server.City" class="form-control"></InputText>
            </Control>
            <ValidationControl>
                <ValidationMessage For="() => server.City"></ValidationMessage>
            </ValidationControl>
        </FieldComponent>

        <FieldComponent Label="Online">
            <Control>
                <InputCheckbox @bind-Value="server.IsOnline" class="form-check-input"></InputCheckbox>
            </Control>
        </FieldComponent>

        <br />
        @if (server.ServerId > 0)
        {
            <button class="btn btn-primary" type="submit">Update</button>
        }
        else
        {
            <button class="btn btn-primary" type="submit">Save</button>
        }
        &nbsp;
        <a href="/servers" class="btn btn-primary">Close</a>
    </EditForm>
}

@code {

    [Parameter]
    public int? Id { get; set; }

    [SupplyParameterFromForm]
    private Server? server { get; set; }

    protected override void OnParametersSet()
    {
        if (this.Id.HasValue)
            server ??= ServersEFCoreRepository.GetServerById(this.Id.Value);
        else
            server ??= new Server() { IsOnline = false };
    }

    private void Submit()
    {
        if (server != null)
        {
            if (this.Id.HasValue)
                ServersEFCoreRepository.UpdateServer(server.ServerId, server);
            else
                ServersEFCoreRepository.AddServer(server);
        }

        NavigationManager.NavigateTo($"/servers/back_from/{this.server?.City}");

    }
}
