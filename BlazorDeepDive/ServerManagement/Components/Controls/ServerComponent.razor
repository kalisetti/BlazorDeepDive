@inject NavigationManager NavigationManager

@if (Server != null) {
	<li @key="Server.ServerId" style="background-color: @GetBackgroundColor()">
		<text>
		@Server.Name in @Server.City is <span style="color: @(Server.IsOnline ? "green" : "red")">@(Server.IsOnline ? "online" : "offline")</span>

		&nbsp;
		<a href="/Servers/@Server.ServerId" class="btn btn-link">Edit</a>

		&nbsp;
		@if (Server.IsOnline) {
			<button type="button"
				class="btn btn-outline-danger"
				@onclick="@(() => {Server.IsOnline = false; } )">
				Turn Off
			</button>
		}
		else {
			<button type="button"
					class="btn btn-outline-success"
					@onclick="@(() => {Server.IsOnline = true; } )">
				Turn On
			</button>
		}

		&nbsp;
		@if (Server.IsOnline == true) {
			Random random = new Random();
			int randomNumber = random.Next(0, 500);

			<span>@randomNumber</span>
		} else {
			<span>N/A</span>
		}

		<EditForm Enhance="true" Model="Server" FormName="@($"form-Server-{Server.ServerId}")" OnValidSubmit="@(() => { DeleteServer(Server.ServerId); })">
			<button type="submit" class="btn btn-primary">Delete</button>
		</EditForm>
		</text>
	</li>
}

@code {
	[Parameter]
	public Server? Server { get; set; }

	[CascadingParameter(Name = "SelectedCity")]
	public string? SelectedCity { get; set; }

	private void DeleteServer(int ServerId) {
		if (ServerId > 0) {
			ServersRepository.DeleteServer(ServerId);
			NavigationManager.NavigateTo("/Servers", true);
		}
	}

	private string GetBackgroundColor() {
		if (SelectedCity != null) {
			switch (this.SelectedCity) {
				case "Perth": return "aliceblue";
				case "Melbourne": return "lightgray";
				case "Brisbane": return "palegreen";
				case "NSW": return "white";
				default: return "white";
			}
		} else {
			return "white";
		}
	}
}
